<!DOCTYPE html>
<html>

<head>
  <title>Web3Auth / Biconomy</title>
  <meta charset="UTF-8" />
  <link rel="stylesheet" href="style.css" />
  </head>
  <body>
  <div class="container">
    <h1 class="title">Test Sample</h1>
    <!-- Logged In -->
    <div class="grid btn-logged-in">
      <button id="get-accounts" class="btn">Get Accounts</button>
      <button id="mint-nft" class="btn">Approve USDC</button>

      <button id="logout" class="btn">Logout</button>

    </div>

    <div class="console" id="console">
      <p id="code" class="code"></p>
    </div>
    <div class="grid btn-logged-out">
      <button id="login" class="btn">Login</button>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@web3auth/web3auth@1.0.0/dist/web3auth.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/web3@1.7.3/dist/web3.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@biconomy/mexa@2.0.35/dist/mexa.js"></script>
  <script>
    let web3auth = null;
    let provider = null;
    let web3;
    let Biconomy = window.Biconomy;
    let biconomy;

    var USDCABI = [{ "inputs": [ { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" } ], "name": "approve", "outputs": [ { "internalType": "bool", "name": "", "type": "bool" } ], "stateMutability": "nonpayable", "type": "function" },{ "inputs": [ { "internalType": "address", "name": "userAddress", "type": "address" }, { "internalType": "bytes", "name": "functionSignature", "type": "bytes" }, { "internalType": "bytes32", "name": "sigR", "type": "bytes32" }, { "internalType": "bytes32", "name": "sigS", "type": "bytes32" }, { "internalType": "uint8", "name": "sigV", "type": "uint8" } ], "name": "executeMetaTransaction", "outputs": [ { "internalType": "bytes", "name": "", "type": "bytes" } ], "stateMutability": "payable", "type": "function" },{ "inputs": [ { "internalType": "address", "name": "user", "type": "address" } ], "name": "getNonce", "outputs": [ { "internalType": "uint256", "name": "nonce", "type": "uint256" } ], "stateMutability": "view", "type": "function" }]
    
    const contractAdd = "0xad1042b426fafbd7a811eff4731199c6493c72bd";
    const USDCAdd = "0x0FA8781a83E46826621b3BC094Ea2A0212e71B23";

    (async function init() {
      $(".btn-logged-in").hide();
      $("#sign-tx").hide();

      const clientId = "BH9EHzZHYksWlCLBaKhYBWgLvAW5rLccNHMy6B1kJQaxGDdbwZcLnfAfIKPy4TTINxXMH-fo7TpZ1V4t6sxqQYw";

      web3auth = new window.Web3auth.Web3Auth({
        clientId,
        chainConfig: {
          chainNamespace: "eip155",
          chainId: "0x13881",
          rpcTarget: "https://rpc.ankr.com/polygon_mumbai",
        },uiConfig: {
          theme: "light",
          loginMethodsOrder: ["google", "facebook"],
          appLogo: "https://test.voax.app/img/favicon.png",
        },
      });
      await web3auth.initModal();
      if (web3auth.provider) {
        $(".btn-logged-in").show();
        $(".btn-logged-out").hide();
        biconomy = new Biconomy(web3auth.provider, {apiKey:"3aju5wdMz.5eed5fcc-2d40-49f3-97f7-c8869e732e3b", debug: true});
        web3 = new Web3(biconomy);
      } else {
        $(".btn-logged-out").show();
        $(".btn-logged-in").hide();
      }
    })();

    $("#login").click(async function(event) {
      try {
        const provider = await web3auth.connect();
        biconomy = new Biconomy(provider, {apiKey:"3aju5wdMz.5eed5fcc-2d40-49f3-97f7-c8869e732e3b", debug: true});
        web3 = new Web3(biconomy);
        $(".btn-logged-out").hide();
        $(".btn-logged-in").show();
      } catch (error) {
        console.error(error.message);
      }
    });

    $("#get-accounts").click(async function(event) {
      try {
        const web3 = new Web3(web3auth.provider);
        const accounts = await web3.eth.getAccounts();
        $("#code").text(JSON.stringify(["accounts", accounts], null, 2));
      } catch (error) {
        console.error(error.message);
      }
    });

    $("#mint-nft").click(async function(event) {
      try {
        const account = (await web3.eth.getAccounts())[0];
        const contract = new web3.eth.Contract(USDCABI, USDCAdd);
        let nonce = await contract.methods.getNonce(account).call();
        let functionSignature = await contract.methods.approve(contractAdd,100000000).encodeABI();
        
        let message = {};
        message.nonce = parseInt(nonce);
        message.from = account;
        message.functionSignature = functionSignature;
        const domainType = [
            { name: "name", type: "string" },
            { name: "version", type: "string" },
            { name: "verifyingContract", type: "address" },
            { name: "salt", type: "bytes32" },
        ];
        
        const metaTransactionType = [
            { name: "nonce", type: "uint256" },
            { name: "from", type: "address" },
            { name: "functionSignature", type: "bytes" }
        ];
        
        let domainData = {
            name: "TestContract",
            version: "1",
            verifyingContract: USDCAdd,
            salt: '0x' + (80001).toString(16).padStart(64, '0')
        };
        
        const dataToSign = JSON.stringify({
            types: {
                EIP712Domain: domainType,
                MetaTransaction: metaTransactionType
            },
            domain: domainData,
            primaryType: "MetaTransaction",
            message: message
        });
        console.log(dataToSign)
        web3.currentProvider.send({
          jsonrpc: "2.0",
          id: 999999999999,
          method: "eth_signTypedData_v4",
          params: [account, dataToSign]
        },function(error, response) {
          console.log(response)
          if(!error && response.result){
            
            let { r, s, v } = getSignatureParameters(response.result);
            
            console.log({account,functionSignature, r, s, v});
            
            (async function(){
              let gasPrice = await web3.eth.getGasPrice();
              let gasLimit = await contract.methods.executeMetaTransaction(account,functionSignature, r, s, v).estimateGas({ from: account });
              console.log({ gasPrice, gasLimit });
			  //throws error here. 
              // contract2.methods.executeMetaTransaction(account,functionSignature, r, s, v).send({
              //   from: account,
              //   // maxPriorityFeePerGas: "34000000000",
              //   // maxFeePerGas: "35000000000",
              // }).once('transactionHash', function(hash){
              //     console.log(hash)
              //   }).once('confirmation', function(confirmationNumber, receipt){
              //     console.log(receipt)
              // }).on('error', function(error, receipt) {
              //     console.log(error)
              // });
            })() 
          }
        });
      } catch (error) {
        console.error(error.message);
      }
    });
    const getSignatureParameters = signature => {
      if (!web3.utils.isHexStrict(signature)) {
          throw new Error(
              'Given value "'.concat(signature, '" is not a valid hex string.')
          );
      }
      var r = signature.slice(0, 66);
      var s = "0x".concat(signature.slice(66, 130));
      var v = "0x".concat(signature.slice(130, 132));
      v = web3.utils.hexToNumber(v);
      if (![27, 28].includes(v)) v += 27;
      return {
          r: r,
          s: s,
          v: v
      };
    };
    
    $("#logout").click(async function(event) {
      try {
        await web3auth.logout();
        $(".btn-logged-in").hide();
        $(".btn-logged-out").show();
      } catch (error) {
        console.error(error.message);
      }
    });
  </script>
</body>

</html>